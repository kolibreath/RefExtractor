基于惩罚函数的方法主要是根据约束违背程度来构造惩罚项（Penalty Term）。通过将惩罚项添加到目标函数中，将有约束的优化问题转化为无约束的优化问题。惩罚函数方法中最关键的问题是如何设置惩罚函数系数（Penalty Coefficient），惩罚函数系数对算法的性能和效率起着决定性的作用。根据设置方法的不同，惩罚方法可分为静态法、动态法和自适应法。（1）静态方法是一种简单的设计思路，可以用于解决简单的约束多目标优化问题。在使用静态方法的多目标约束问题中，惩罚系数在搜索过程中，不会因为进化早期和晚期发生变化，同时这样的做法不能区分目标和约束之间的偏好，不利于目标和约束之间的平衡。（2）动态方法是惩罚系数随着进化代数或其他指标的增加而变化的方法。在进化的不同阶段，通过调整惩罚参数，给予目标和约束的不同的权重来实现二者之间的平衡。动态方法在设计合适的惩罚函数变化规则上存在困难，针对不同的问题需要设置不同的变化规则。（3）自适应方法在进化过程中保留种群的信息，然后将获得的信息反馈给种群以调整惩罚系数。与上述两种方法相比，因为自适应策略可以利用潜在的反馈信息对演化提供指导，在复杂的问题可以获得更好的性能。Jadaan和Rao[18]提出了一种无参数的惩罚方法，结合了新的非支配排序遗传算法(NRGA)，实现的算法在进化过程中不断寻找更好的帕累托最优集。Zhang[64]等通过采用通用协同进化模型利用自适应惩罚函数用于处理约束，使用种群中可行个体的数量作为指标惩罚不可行个体。Jan和Zhang[42]采用阈值来控制对不可行解决方案的惩罚程度。基于这项工作，Jan等人[38]提出了阈值的自适应和动态版本，然后将其嵌入到基于分解的多目标进化算法（MOEA/D）框架中来处理约束多目标问题。Jiao等人[23]提出了一种可行的指导策略，它利用约束违反程度来修改目标函数以获得新的适应度。此外，为了达到目标和约束的平衡，惩罚系数根据当前种群中的可行性比例进行调整。Maldonado和Zapotecas-Martinez[72]提出了一种动态惩罚函数方法，其中参数随着代数逐渐变化，并嵌入到MOEA/D框架中以解决约束多目标问题。Vaz等人[63]设计了一个三步惩罚，其中在进化的不同阶段使用了三种不同的惩罚系数。受深度学习的启发，Fan等人[41]提出了一种学习引导的参数设置方法，可以自适应地生成惩罚参数。该惩罚函数结合了约束违反程度、目标函数值和当前生成来设计一个指数衰减模型，该模型嵌入到Push-and-Pull（PPS）[46]框架中以解决约束多目标问题。以下算法与惩罚函数方法具有相似的机制，因此也归入这一类。Ma等人[69]设计了一个基于两个排序的约束处理机制，名为双排名机制（Two-Ranking，ToR），其中每个个体以两种方式排序，一种基于目标函数，另一种基于约束支配原则（Constrained Dominance Principle，CDP）[34]。然后，根据当前种群中可行解的比例，对两个排序进行自适应加权，得到一个新的适应度函数。但是，它的参数从0.5开始变化，这意味着对约束的偏好始终等于或大于目标。另外，因为只考虑可行解的比例。如果比例等于0，则目标和约束的权重总是相等的，这会使算法在一些复杂问题上无法找到可行的解。为了缓解这些问题，Yu等人[55]提出了一种动态选择偏好辅助机制来转换目标和约束之间的偏好。具体来说，根据设计的余弦函数曲线[81][45]，对目标的偏好从1逐渐降低到0。Ming等人[49]还对每个个体进行了两种排名，一种基于收敛性，另一种基于多样性。最后根据生成信息，通过sigmoid函数的规则对这两种排序进行加权。为了在进化初期引导种群从不同方向进入可行区域，并在后期逼近帕累托最优解，Ma和Wang[78]提出了一种基于移位的惩罚方法，命名为ShiP，在其中不可行解首先根据其相邻可行解的分布进行移动，移动的程度由可行解的比例自适应控制。然后，考虑到它们的约束违反，对转移的不可行解决方案进行惩罚。Garcia等人[52]使用惩罚函数方法选择一组接近可行空间且目标函数较小的点。此外，该方法嵌入基于指标的框架中，以解决等式约束的多目标优化问题。基于分解和约束的方法分别比较目标和约束，主要包括约束支配原则（Constrained DominancePrinciple，CDP）[34]、$$\varepsilon$$约束方法[36][19]和随机排序（StochasticRanking,SR）[14]。1）CDP：CDP 由 Deb 等人提出 [34]，由于其简单性和易于实施，因此最常用。 CDP 使用以下标准比较配对个体 A 和 B：当个体 A 和 B 都是可行解时，如果 A Pareto 支配 B，则选择 A 进入下一代； 当A为可行解，B为不可行解时，选择A； 当 A 和 B 都是不可行解时，选择约束违反度最小的个体。CDP的操作相对简单，因为CDP存在偏好可行解的特性，当约束多目标问题存在离散的可行区域或不可行的障碍时，这会导致种群落入一些局部可行区域。为了弥补CDP的这一缺点，Jimenez等人[57]采用小生境技术来增加种群的多样性。Saha和Ray[59]提出了一种基于概率点的等式约束修复方法，该方法结合了CDP和聚类方法来修复不可行的解决方案。为了利用不可行解的有效信息，Wei和Wang[60]将CDP应用于基于不可行精英的粒子群算法。前期保留客观价值好的个体，后期保存客观价值小的、违反约束的个体。基于NSGA-II和MOEA/D框架，Jain和Deb[20]提出NSGA-III和CMOEA/D来约束多目标优化。Fan等人[54]设计了一种新的基于角度的CHT，命名为ACDP，它将角度信息集成到CDP中，并进一步利用了不可行解的信息。后来，ACDP被嵌入到MOEA/D框架中来解决约束多目标问题[30]。此外，Ning等人[61]提出了一种改进的混合多目标优化算法来解决约束多目标问题，其中每个解决方案根据其约束违反程度和Pareto秩给定一个约束非支配秩。Wang和Xu[24]使用ACDP解决了有约束的多目标优化问题，其中将首先选择具有良好多样性的个体来应对大不可行障碍带来的挑战。2）$$\varepsilon$$约束方法：这种方法是由Takahama和Sakai[36]提出的，它使用参数$$\varepsilon$$来放松约束。$$\varepsilon$$逐渐减小，当个体的约束违反程度小于$$\varepsilon$$时，认为是可行解。显然，当$$\varepsilon$$减少到0时，$$\varepsilon$$约束方法与CDP相同。在比较个体A和B时，$$\varepsilon$$约束方法使用以下标准：- 当$$CV(A) \leq \varepsilon$$,$$CV(B) \leq \varepsilon$$并且A Pareto支配B时，选择A- 当$$CV(A) \leq \varepsilon$$,$$CV(B) > \varepsilon$$选择A- 当$$CV(A) >\varepsilon$$,$$CV(B)> \varepsilon$$并且当$$CV(A) < CV(B)$$选择ASaxena等人[62]将$$\varepsilon$$约束方法集成到NSGA-II框架中，以控制种群的不可行性，增强种群的收敛性。Zapotecas等人[70]提出了一种基于分解的多目标粒子群优化算法，并将$$\varepsilon$$约束方法融入其中以解决约束多目标问题在[27]中，Yang等人还将$$\varepsilon$$约束方法和自适应操作选择集成到基于分解的多目标框架中。Becerra等人[37]使用$$\varepsilon$$约束方法在PF上（或非常接近）获得几个点，然后采用基于粗糙集的方法将这些解决方案扩展到覆盖整个Pareto前沿。Martinez和Coello[32]展示了一种基于$$\varepsilon$$约束方法的方法，其中使用MOEA/D中邻域的相关信息来获得允许可行区域内的有希望的解决方案。Fan等人改进了$$\varepsilon$$约束方法并将其嵌入到MOEA/D框架中。在[75]中采用当前总体中可行解的比例来动态调整$$\varepsilon$$参数水平。Yang等人[53]基于改进的$$\varepsilon$$约束方法设计了一种多目标差分进化（DE）算法（MODE-SaE），其中$$\varepsilon$$水平可以根据不可行个体的最大和最小约束违反值自适应调整。Zapotecas-Martnez和Ponsich[77]以约束违反度和标量函数为目标，将约束多目标问题建立为一个双目标问题，并将$$\varepsilon$$约束方法集成到MOEA/D中以解决构建的问题。Yang等人[65]提出了一种动态约束处理机制，将搜索过程分为两种模式：无约束搜索和约束搜索。在约束搜索模式下，使用改进的$$\varepsilon$$约束方法来提高种群多样性。为了确保帕累托前沿解决方案的多样性，Wang等人[21]将$$\varepsilon$$约束方法与小生境策略相结合来解决约束多目标问题。为了防止种群落入局部可行域或不可行域，Zhuetal[26]提出了一种帮助种群摆脱停滞状态的技术，然后使用改进的$$\varepsilon$$约束方法搜索CPF。3）SR：在该方法中，引入了一个概率参数$$pf$$。比较两个个体时，$$pf$$的概率只比较他们的目标函数值，$$(1-pf)$$的概率比较他们的约束违反程度。该方法在一定程度上能够利用目标函数的信息。Geng等人[68]在解决约束多目标问题时使用SR来平衡目标和约束。Jan和Khanum[79]将修改后的SR嵌入到MOEA/D框架中以解决约束多目标问题。Ying等人[43]提出了一种自适应随机排序机制，根据当前进化阶段和个体违规程度的差异动态调整概率参数。Liu等人[44]分别将基于指标的MOEA与CDP、$$\varepsilon$$约束方法和SR相结合，研究了基于指标的CMOEA。Gu等[29]提出了一种基于代理的进化算法，其中提出了一种基于适应度机制和自适应概率算子的改进SR策略。该策略考虑了收敛性和多样性，以提高候选解决方案的质量。在多目标方法中，约束被视为一个附加目标或多个附加目标，将约束多目标问题转化为无约束对应物，然后可以使用MOEA来解决转换后的问题。 变换后的目标函数如下：$$min \, \textbf{F(\textbf{x})} = \{ f_1(\textbf{x}), f_2(\textbf{x}),f_3(\textbf{x}),\dots,f_m(\textbf{x}), CV(\textbf(x))\}^T$$或者是$$min \, \textbf{F(\textbf{x})} = \{ f_1(\textbf{x}), f_2(\textbf{x}),f_3(\textbf{x}),\dots,f_m(\textbf{x}), cv_1(\textbf(x)), \dots, cv_k(\textbf(x))\}^T$$在[50]中，约束被转化为两个新的目标：一个是基于惩罚函数，另一个是违反约束的数量。基于约束违反度量，Ray等人在[16]的工作中增加了一个新的目标，并设计了一种不可行驱动的进化算法来促进种群从不可行区域逼近约束边界。Issac等人[67]将约束视为一个新的目标，将原m个目标的约束最小化问题重新定义为具有m+1个目标的无约束最小化问题。Long[80]构建了一种用于解决约束多目标问题的新CHT，其中将所获得解决方案的收敛性、多样性和可行性作为多目标子问题的三个新目标。Peng等人以约束违反程度为新目标。[28]设计了一种基于有向权重的新CHT来解决约束多目标问题，其中使用分别分布在可行和不可行区域中的两种权重来引导搜索到有希望的区域。周等人[73]提出了一个解决受约束的多目标问题的三目标进化框架。该框架将约束转化为可行性指标，然后与收敛性指标和多样性指标相结合，形成三个新的目标。为了更有效地解决约束多目标问题，许多研究人员将约束多目标问题转换为其他问题，例如将约束多目标问题转换为协同优化问题或两阶段优化问题。转换后，一些有前途的算子，如协同进化，可以帮助种群更好地探索搜索空间，发现一些新的和潜在的信息，最终获得完整的CPF。1）将约束多目标问题转化成基于多种群的合作优化问题：Chafekar等人 [48] 将一个 约束多目标问题 转化为多个单目标优化问题，其中实现了多个遗传算法，每个算法优化一个目标，然后交换目标信息。Wang等人 [40] 在使用 m 个子种群时也提出了一种协作差分进化框架，每个子种群都使用约束优化一个目标，即单约束优化。此外，使用存档种群来保存获得的约束非支配解以接近 CPF。 Liu和Wang[22]提出了一种基于分解和临时存档的CMOEA，将一个约束多目标问题分解为若干个子问题，每个子问题都有自己的子群体和临时存档。然后通过协同进化策略优化每个子问题。后来，他们提出了一种基于边界搜索和归档的约束处理方案[76]，其中一个约束多目标问题被分解为几个子问题，每个子问题都有自己的归档。此外，还构建了边界搜索策略，提高了算法的效率。为了保持解决方案的分布，Yang等人[58]通过划分目标空间将约束多目标问题分解为多个子问题，并使用多个CHT来解决优化问题。Liu等人[35]将约束多目标问题更改为双种群优化问题，其中一个种群仅优化约束，而另一个种群专注于优化目标。同时，这两个群体之间存在着信息的交互和知识的传递。Tian等人[17]提出了一种用于求解约束多目标问题协同进化框架（CCMO），其中一个种群用于求解原始约束多目标问题，即搜索CPF，而另一个种群忽略约束来寻找UPF。此外，这两个群体相互协助解决CMPO。Li等人[71]设计了一种双存档进化算法（C-TAEA），一种是面向收敛的存档（CA），旨在推动种群沿着帕累托前沿，另一种是面向多样性的存档（DA），用于探索CA的未开发地区并保持种群多样性。Wang等人[47]通过使用两个种群设计了一个合作的MOEA：推进种群和正常种群，专注于收敛，推进种群在早期不考虑约束，而在后期只考虑约束。正常种群搜索整个CPF，优先考虑种群的可行性和多样性。Liu等人设计了一种双向协同进化算法，其中主要种群和档案种群同时使用[31]。具体来说，主要种群保持可行性并从可行侧移动到CPF，而存档种群使用角度信息保持种群多样性并从不可行侧逼近CPF。2）将约束多目标问题转换成两阶段的优化问题：Santana-Quintero等人 [15] 将 MOEA 与基于粗糙集理论的局部搜索方法相结合来解决 约束多目标问题。在第一阶段，MOEA 用于接近帕累托前沿。第二阶段，利用模糊集理论提高帕累托前沿解的多样性和收敛性。Fan等人 [60]提出了一个Pull-and—Push搜索（PPS）框架。 push阶段的目标是越过不可行区域到UPF。在拉取阶段，采用改进的$$\varepsilon$$约束方法搜索CPF。基于PPS框架，将一个约束多目标问题分解为一组简单的子问题[66]，每个子问题对应一个子群体，PPS框架为应用于每个子种群以解决相关子问题。基于多样性距离度量，Wang 等人 [56] 提出了一种目标空间修正机制，使有希望的不可行解更有效地找到最优解。此外，采用PPS搜索框架调整PF位置，防止种群陷入局部最优，可以降低时间复杂度。Garcia等人[39]利用细胞遗传算法（CGA）的特点，结合PPS技术解决约束多目标问题，Tian等人[25]设计了一种两阶段进化算法，命名为CMOEA-MS，其中一个阶段可以帮助种群到达可行区域，另一个阶段可以帮助种群到达可行区域。阶段可以使种群沿着可行边界扩散。此外，算法还可以根据种群的状态，自适应地在这两个阶段之间切换。对于在决策空间和目标空间都有约束的约束多目标问题，Liu和Wang[74]提出了一个两阶段优化的想法。第一阶段是单目标问题，旨在寻找有希望的可行区域；第二阶段需要寻找最后的帕累托前沿并到达CPF。向等人[68]提出了一种两阶段算法，命名为CIC-MOEA/D，第一阶段的目标是找到UPF，所以只考虑目标；此外，为了在第二阶段很好地接近CPF，逐渐强调约束。在[51]中，整个进化过程分为两个阶段。第一阶段旨在保持收敛和多样性之间的平衡，第二阶段致力于保持可行性和多样性，从而覆盖一个分布良好的帕累托前沿。Yu和Lu[33]提出了一种基于DE的角点（Corner Point）算法，包括两个阶段。第一阶段是寻找角点，第二阶段是搜索真正的CPF。